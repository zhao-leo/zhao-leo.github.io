<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on April Diary</title>
    <link>https://www.zhaocloud.work/tags/rust/</link>
    <description>Recent content in Rust on April Diary</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>April. 本站遵循 CC-BY-NC 4.0 协议</copyright>
    <lastBuildDate>Fri, 07 Feb 2025 00:11:40 +0800</lastBuildDate>
    <atom:link href="https://www.zhaocloud.work/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Yolo Binding的相关代码部分</title>
      <link>https://www.zhaocloud.work/posts/yolo-binding%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E9%83%A8%E5%88%86/</link>
      <pubDate>Fri, 07 Feb 2025 00:11:40 +0800</pubDate>
      <guid>https://www.zhaocloud.work/posts/yolo-binding%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E9%83%A8%E5%88%86/</guid>
      <description>&lt;h2 id=&#34;文件组织&#34;&gt;文件组织&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;YOLO_BINDING&#xA;│  .gitignore&#xA;│  Cargo.lock&#xA;│  Cargo.toml&#xA;│  LICENSE&#xA;│  readme.md&#xA;│&#xA;└─src&#xA;    │  lib.rs&#xA;    │&#xA;    ├─core&#xA;    │      export.rs&#xA;    │      load.rs&#xA;    │      mod.rs&#xA;    │      predict.rs&#xA;    │&#xA;    └─utils&#xA;            HarmonyOS_Sans_Regular.ttf&#xA;            mod.rs&#xA;            picture.rs&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个好的项目要从文件开始设计(虽然咱是蒟蒻，也要有成为牛犇的理想哇！)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;core&lt;/code&gt;是主推理环节，同时实现了预处理，推理，后处理三部分，是核心部分&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;utils&lt;/code&gt;是对解析出的数据进行下一步解析，比如画框，打标签等，后续也是可以拓展的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;代码相关&#34;&gt;代码相关&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这里不会展示所有代码，完整代码可以去仓库查看&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;预处理&#34;&gt;预处理&lt;/h3&gt;&#xA;&lt;p&gt;在这个环节，我使用了&lt;code&gt;tch&lt;/code&gt;库中封装好的函数。&lt;/p&gt;&#xA;&lt;p&gt;但这个环节会对原图像进行拉伸,归一化，建议输入正方形图片&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本来写了蒙灰色底版，但是&lt;code&gt;DynamicImage&lt;/code&gt;转&lt;code&gt;Tensor&lt;/code&gt;没有解决，后续再说吧&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;整体代码类似，这里只展示一个：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;load_one_image&lt;/span&gt;(image_path: &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#9aedfe&#34;&gt;str&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt;Tensor, &lt;span style=&#34;color:#ff5c57&#34;&gt;Box&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;dyn&lt;/span&gt; Error&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;let&lt;/span&gt; image_tensor &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; vision::image::load(Path::new(&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;amp;&lt;/span&gt;image_path))&lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;let&lt;/span&gt; image &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; tch::vision::image::resize(&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;amp;&lt;/span&gt;image_tensor, &lt;span style=&#34;color:#ff9f43&#34;&gt;640&lt;/span&gt;, &lt;span style=&#34;color:#ff9f43&#34;&gt;640&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .unwrap()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .unsqueeze(&lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .to_kind(tch::Kind::Float)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;255.&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;Ok&lt;/span&gt;(image)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;YOLO的输入张量形状:&lt;code&gt;[X,3,640,640]&lt;/code&gt;，其中&lt;code&gt;X&lt;/code&gt;是图片数量&lt;/p&gt;&#xA;&lt;h3 id=&#34;模型引入推理&#34;&gt;模型引入&amp;amp;推理&lt;/h3&gt;&#xA;&lt;p&gt;由于&lt;code&gt;libtorch&lt;/code&gt;的封装相当好，我们直接调用&lt;code&gt;torchscript&lt;/code&gt;模型就可以&lt;/p&gt;&#xA;&lt;p&gt;但是注意之前&lt;code&gt;torch_cuda.dll&lt;/code&gt;的坑。&lt;/p&gt;&#xA;&lt;p&gt;因为是自用的原因，我们直接调用在编写的时候，为了尽可能避免报错，允许在用户设置为&lt;code&gt;Gpu&lt;/code&gt;时仍然调用&lt;code&gt;Cpu&lt;/code&gt;，这点后续会删除，避免误导。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;模型加载&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;let&lt;/span&gt; device &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; cuda &lt;span style=&#34;color:#ff6ac1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;true&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;mut&lt;/span&gt; libtorch_path &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; env::var(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;LIBTORCH&amp;#34;&lt;/span&gt;).unwrap();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    libtorch_path.push_str(&lt;span style=&#34;color:#5af78e&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;\lib\torch_cuda.dll&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; Path::new(&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;amp;&lt;/span&gt;libtorch_path).exists() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff5c57&#34;&gt;let&lt;/span&gt; path &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; CString::from_str(&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;amp;&lt;/span&gt;libtorch_path).unwrap();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;unsafe&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            LoadLibraryA(path.as_ptr() &lt;span style=&#34;color:#ff6ac1&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; c_char);            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Device::cuda_if_available()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff6ac1&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        panic!(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;No &lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt; exist,please check your libtorch version or set &amp;#39;cuda&amp;#39; false instead&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;amp;&lt;/span&gt;libtorch_path&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff6ac1&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Device::Cpu&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}; &lt;span style=&#34;color:#78787e&#34;&gt;// device choiced&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;let&lt;/span&gt; model &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; CModule::load_on_device(Path::new(model_path), device).expect(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;load model failed&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;YOLO导出的&lt;code&gt;torchscript&lt;/code&gt;模型中是有元信息的，但是我没有在&lt;code&gt;torch-rs&lt;/code&gt;中找到有关接口，因此：&lt;/p&gt;</description>
    </item>
    <item>
      <title>记录一次YOLO的RUST实现</title>
      <link>https://www.zhaocloud.work/posts/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1yolo%E7%9A%84rust%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 06 Feb 2025 16:33:16 +0800</pubDate>
      <guid>https://www.zhaocloud.work/posts/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1yolo%E7%9A%84rust%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;这篇博客不能算是编程相关，因为只是一次记录而已，代码相关可以参考文末仓库和我的  &lt;a href=&#34;https://www.zhaocloud.work/posts/yolo-binding%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E9%83%A8%E5%88%86/&#34;&gt;相关博客&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;事情的起因是我和同学在准备工创赛，要做一个智能垃圾桶(AI垃圾分类)，本来是使用&lt;code&gt;Python&lt;/code&gt;做推理的，并用了&lt;code&gt;PyQt&lt;/code&gt;做前端。&lt;/p&gt;&#xA;&lt;p&gt;但是没想到哇٩(ŏ﹏ŏ、)۶！那个Qt在树莓派上始终不能正常安装，于是我们考虑换技术栈，我一开始考虑使用&lt;code&gt;libtorch+cpp&lt;/code&gt;的方式实现。不过显然，这个难度完全不是我能对付的……&lt;/p&gt;&#xA;&lt;p&gt;不过非常不巧(?!)，我看到了&lt;code&gt;libtorch&lt;/code&gt;的&lt;code&gt;rust&lt;/code&gt;绑定&lt;code&gt;torch-rs&lt;/code&gt;，加上我之前使用过&lt;code&gt;Tauri&lt;/code&gt;框架，整体来说能满足我的需求，于是乎，本着折腾ʅ（´◔౪◔）ʃ的原则，我开始先解决核心问题——使用&lt;code&gt;Rust&lt;/code&gt;实现&lt;code&gt;yolo&lt;/code&gt;的推理。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;其中  &lt;a href=&#34;https://blog.csdn.net/shelgi/article/details/131558507&#34;&gt;这篇文章&lt;/a&gt;  给了我很大启发，文章中介绍了yolo在rust推理的基本原理，版本比较陈旧，但是仍然推荐阅读&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;上古仙术核心出装-version-010&#34;&gt;上古仙术，核心出装 Version-0.1.0&lt;/h2&gt;&#xA;&lt;p&gt;我于是依着葫芦画瓢，写了最初的单文件推理版本，这个版本非常简陋，只包含了图片转Tensor和输出结果到命令行，不过也是初具雏形，但是仍然存在如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;没有形成模块化的package，所有东西是混在&lt;code&gt;main.rs&lt;/code&gt;和&lt;code&gt;yolo.rs&lt;/code&gt;里面&lt;/li&gt;&#xA;&lt;li&gt;没有实现画框和打标签的功能，也就是说完全不能用图片展示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;等等问题，反正就是能用，但不是很能用&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zhao-leo/yolov8_rust_demo/blob/41f508aa2a65183ab30638e598defed8b9f52d82/src/yolo.rs&#34;&gt;点击前往&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;顺嘴一提，本来是准备用fast-r-cnn的，但是教程有限，我们组就放弃了。还是yolo封装好哇！&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;法宝现世曲线救国-version-012&#34;&gt;法宝现世，曲线救国 Version-0.1.2&lt;/h2&gt;&#xA;&lt;p&gt;由于痛苦的环境配置给我留下了很深刻的印象，在这个版本中，我特意编写了一个启动器，来对主程序进行环境变量的注入，同时编写了两个&lt;code&gt;bat&lt;/code&gt;方便推理，不管怎么说，还是可以比较完美的运行的。&lt;/p&gt;&#xA;&lt;p&gt;同时，在这个版本，我解决了画框和画字的问题，也就是说，这玩意可以正常运行了(在环境变量正确注入的情况下)。&lt;/p&gt;&#xA;&lt;p&gt;但是仍然存在一些不足，也就是&lt;code&gt;torch-rs&lt;/code&gt;库本身的问题，使得&lt;code&gt;libtorch&lt;/code&gt;不能正确识别我的&lt;code&gt;GPU&lt;/code&gt;，我在&lt;code&gt;github issues&lt;/code&gt;上看到了解决方案，但是暂时没有想到很好的方法封装进我的仓库。&lt;/p&gt;&#xA;&lt;p&gt;而且，这个批量推理bat需要反复将模型载入，就是挺抽象的，嗯……&lt;/p&gt;&#xA;&lt;p&gt;版本链接：&lt;a href=&#34;https://github.com/zhao-leo/yolov8_rust_demo/tree/006ff1c79284dd9cc9acb15bdc8e8eb25ec5d406&#34;&gt;点击前往&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;内存：I&amp;#39;m free~!&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;丹出-version-02x&#34;&gt;丹出~！ Version-0.2.X&lt;/h2&gt;&#xA;&lt;p&gt;在这个版本，我把核心库分离出来了，封装成了&lt;code&gt;yolo_binding&lt;/code&gt;这个库，它能在Windows上很好的运行(尽管&lt;code&gt;docs.rs&lt;/code&gt;的构建问题还没有解决)，有一个相对好用的接口，一切都按我设想的运行，主程序只要对模型实例化一次，相关的封装也按照我的设想进行了修改……&lt;/p&gt;&#xA;&lt;p&gt;不管怎么说，对我来说，还是有点成就感的，尽管有这样那样的问题没有解决，但是自己尽力就好~&lt;/p&gt;&#xA;&lt;p&gt;模块代码：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zhao-leo/yolo_binding&#34;&gt;github&lt;/a&gt;&#xA;&lt;a href=&#34;https://crates.io/crates/yolo_binding&#34;&gt;crates.io&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>在Windows安装Mingw版本的Rust工具链</title>
      <link>https://www.zhaocloud.work/posts/rust%E5%9C%A8windows%E4%B8%8B%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://www.zhaocloud.work/posts/rust%E5%9C%A8windows%E4%B8%8B%E5%AE%89%E8%A3%85/</guid>
      <description>&lt;h1 id=&#34;在windows下安装mingw版本的rust&#34;&gt;在windows下安装mingw版本的Rust&lt;/h1&gt;&#xA;&lt;h2 id=&#34;事前准备&#34;&gt;事前准备&lt;/h2&gt;&#xA;&lt;p&gt;确保你的电脑安装了MinGW-64,可以使用以下命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应当有类似如下的结果:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc (MinGW-W64 x86_64-msvcrt-posix-seh, built by Brecht Sanders) 13.2.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Copyright (C) 2023 Free Software Foundation, Inc.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is free software; see the source for copying conditions.  There is NO&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;下载rust安装程序&#34;&gt;下载Rust安装程序&lt;/h2&gt;&#xA;&lt;p&gt;下载GNU版本的Rust安装程序： &lt;a href=&#34;https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-gnu/rustup-init.exe&#34;&gt;Windows-GNU版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;运行rustup-initexe&#34;&gt;运行&lt;code&gt;rustup-init.exe&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Rust Visual C++ prerequisites&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Rust requires a linker and Windows API libraries but they don&amp;#39;t seem to be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;available.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;These components can be acquired through a Visual Studio installer.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1) Quick install via the Visual Studio Community installer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (free for individuals, academic uses, and open source).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2) Manually install the prerequisites&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (&lt;span style=&#34;color:#ff6ac1&#34;&gt;for&lt;/span&gt; enterprise and advanced users).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3) Don&amp;#39;t install the prerequisites&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (if you&amp;#39;re targeting the GNU ABI).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这一步选择&lt;code&gt;3&lt;/code&gt;，然后&lt;code&gt;Enter&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
